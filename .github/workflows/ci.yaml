name: Django CI/CD Workflow

# triggers for our workflow
on:
  # opening a pull request to master and develop branch will be a trigger
  pull_request:
    branches:
      - master
  # any code pushed to master and develop branch will also be a trigger
  push:
    branches:
      - master

jobs:
  health-check-job(back-end): # health check job for testing and code formatting check
    name: back-end-health-check
    runs-on: ubuntu-latest # os for running the job
    steps:
      - uses: actions/checkout@v2
      - name: build db and api # checking our the code at current commit that triggers the workflow
        run: docker-compose up --build -d db api
      - name: Cache dependency # caching dependency will make our build faster.
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Check Syntax # check code formatting
        run: docker-compose run api pycodestyle --statistics .
      - name: Run Migrations # run migrations to create table in side car db container
        run: docker-compose run api python3 manage.py migrate
      - name: Run Test # running tests
        run: docker-compose run api coverage report --fail-under=80
      - name: Run Coverage # running tests
        run: docker-compose run api python3 manage.py test

  health-check-job(front-end): # health check job for testing and code formatting check
    name: front-end-health-check
    runs-on: ubuntu-latest # os for running the job
    steps:
      - uses: actions/checkout@v2
      - name: build client # checking our the code at current commit that triggers the workflow
        run: docker-compose up --build -d client
      - name: Cache dependency # caching dependency will make our build faster.
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Check Syntax # check code formatting
        run: docker-compose run client yarn lint
      - name: Run Test # running tests
        run: docker-compose run client npm run test:unit:ci
      - name: Run Test # running tests
        run: docker-compose run client npm run test:unit:coverage

  package-job:
    name: package
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_PROJECT }}
        project_id: ${{ secrets.GKE_PROJECT_ID }}
    - run: |-
        gcloud --quiet auth configure-docker
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.GKE_ZONE }}
        credentials: ${{ secrets.GKE_PROJECT }}
    - name: Build
      run: |-
        docker-compose build
    - name: Tag Image
      run: |-
        docker tag trabalho-individual-2020-2_api "gcr.io/${{ secrets.GKE_PROJECT_ID }}/api"
    - name: Publish
      run: |-
        docker push "gcr.io/${{ secrets.GKE_PROJECT_ID }}/api"
    - name: Get Cluster
      run: |-
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --region ${{ secrets.GKE_ZONE }}
    - name: Deploy
      run: |-
        kubectl create deployment api --image=gcr.io/${{ secrets.GKE_PROJECT_ID }}/api
    - name: Check pods # checking pod list to see if they are running.
      run: kubectl get pods
    # Set up kustomize
    # - name: Set up Kustomize
    #   run: |-
    #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    #     chmod u+x ./kustomize

    # # Deploy the Docker image to the GKE cluster
    # - name: Deploy
    #   run: |-
    #     kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/${{ secrets.GKE_PROJECT_ID }}/api
    #     kustomize build . | kubectl apply -f -
    #     kubectl rollout status deployment/api
    #     kubectl get services -o wide

  # deploy-job: # deploy job is for deploying our code to google cloud cluster.
  #   runs-on: ubuntu-latest
  #   needs: [package-job] # will require package-job to be successful for triggering
  #   if: ${{ github.event_name == 'push' }} # will be fire if the trigger event is a push event.
  #   steps:
  #     - name: Checkout code # checking out code.
  #       uses: actions/checkout@v2
  #     - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master # settings up gcloud cli in our job machine.
  #       with:
  #         version: '270.0.0'
  #         service_account_email: ${{ secrets.GKE_EMAIL }} # email address of our service account that will be created with storage and kubernetes permissions
  #         service_account_key: ${{ secrets.GKE_PASSWORD }} # service account file.
  #     - name: Set Repo Location # steps required to find the image id of our image from contiainer registry
  #       id: repo
  #       run: echo "::set-output name=repo_name::gcr.io/${{secrets.GKE_PROJECT_ID}}/trabalho-individual-2020-2:sha-$(git rev-parse --short HEAD)" # we are setting the image location as output to be used in later step
  #     - name: Check Repo Location
  #       run: echo ${{ steps.repo.outputs.repo_name }} # checking our repo location
  #     - name: Install Helm # helm installation in our runner for deploying.
  #       run: |
  #         curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
  #         chmod 700 get_helm.sh
  #         ./get_helm.sh
  #     - name: Connect to kubernetes cluster
  #       run: |
  #         gcloud container clusters get-credentials ${{secrets.GKE_CLUSTER}} --zone ${{secrets.GKE_ZONE}} --project ${{secrets.GKE_PROJECT_ID}}
  #     - name: Helm Deploy # deploying our helm chart to our cluster
  #       run: >
  #         helm upgrade
  #         --install
  #         --set image=${{ steps.repo.outputs.repo_name }}
  #         --set user=${{ secrets.DB_USER }}
  #         --set password=${{ secrets.DB_PASSWORD }}
  #         --set host=${{ secrets.DB_HOST }}
  #         --set port=${{ secrets.DB_PORT }}
  #         --set name=${{ secrets.DB_NAME }}
  #         --wait
  #         --atomic
  #         api
  #         ./k8s
  #     - name: Check pods # checking pod list to see if they are running.
  #       run: kubectl get pods
